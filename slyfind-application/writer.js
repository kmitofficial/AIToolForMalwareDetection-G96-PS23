const fs = require("fs").promises;
const { join } = require("path");
const AdmZip = require("adm-zip");
const { exec } = require("child_process");

async function modifyPythonFile(fromPath, toPath) {
  try {
    // Read the content of the Python file
    const existingContent = await fs.readFile(fromPath, "utf-8");

    // Write the modified content back to the Python file
    await fs.writeFile(toPath, existingContent);

    console.log("File modified successfully!");
  } catch (error) {
    console.error("Error:", error.message);
    throw error; // Re-throw the error for the calling function to handle if needed
  }
}

async function all_run() {
  const pythonFilePath = join(
    __dirname,
    "/volatility3-develop/volatility3/framework/plugins/windows/handles.py"
  );
  const backupFilePath = join(__dirname, "/zip/handle_change.txt");
  console.log("STar with handles.py");
  // Call the function and await its completion
  await modifyPythonFile(backupFilePath, pythonFilePath);
  console.log("Done with handles.py");
  const cli_path = join(
    __dirname,
    "/volatility3-develop/volatility3/cli/__init__.py"
  );
  const cli_txt = join(__dirname, "/zip/cli_tochange.txt");

  // Call the function and await its completion
  await modifyPythonFile(cli_txt, cli_path);
}

async function vol3_unzip() {
  const zipFilePath = "zip/volatility3.zip";
  const extractToPath = ".";

  return new Promise((resolve, reject) => {
    try {
      // Read the zip file
      const zip = new AdmZip(zipFilePath);

      // Extract all contents to the specified path
      zip.extractAllTo(extractToPath, true);

      console.log(`Files extracted to ${extractToPath}`);
      resolve();
    } catch (error) {
      console.error("Error extracting files:", error.message);
      reject(error);
    }
  });
}

async function executeCommand() {
  return new Promise((resolve, reject) => {
    exec('.\\zip\\npcap-1.79.exe', (error, stdout, stderr) => {
      if (error) {
        reject(error);
        return;
      }
      console.log('Command executed successfully!');
      resolve();
    });
  });
}

async function main() {
  const folderName = "volatility3-develop";

  try {
    // Check if the folder exists
    await fs.access(folderName);
    console.log(`The folder "${folderName}" exists.`);
  } catch (err) {
    // The folder doesn't exist
    console.log(`The folder "${folderName}" does not exist.`);
    console.log("Unzipping volatility");

    try {
      await vol3_unzip();
    } catch (error) {
      console.error("Unzipping failed:", error.message);
      return; // Stop execution if unzipping fails
    }

    console.log("Changing Files in volatility");

    try {
      await all_run();
    } catch (error) {
      console.error("Changing files failed:", error.message);
      return; // Stop execution if changing files fails
    }
  }
  try {
    await executeCommand();
  } catch (error) {
    console.error('Error executing command:', error);
  }
}

main();
