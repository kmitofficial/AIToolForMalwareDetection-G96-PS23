import { join } from "node:path";
import { app, BrowserWindow, ipcMain } from "electron";
import processAndWriteToCSV from "../utils/csv";
import { exec } from "child_process";
import {
  listRawFilesWithSpaces,
  ldr_async,
  runModule,
} from "../utils/non_worker";
import { executeCommand, checkForTmpFile } from "../utils/mem_exex";
import runmodel from "../utils/model";
import plyse from "../utils/pdf";
import capturecap from "../utils/capture";
import readAndParseCSV from "../utils/csv_reader";
import rm from "../utils/remove";
const createWindow = () => {
  const mainWindow = new BrowserWindow({
    width: 800,
    height: 600,
    fullscreen: true,
    webPreferences: {
      preload: join(__dirname, "preload.js"),
    },
  });

  if (MAIN_WINDOW_VITE_DEV_SERVER_URL) {
    mainWindow.loadURL(MAIN_WINDOW_VITE_DEV_SERVER_URL);
  } else {
    mainWindow.loadFile(
      join(__dirname, `../renderer/${MAIN_WINDOW_VITE_NAME}/index.html`)
    );
  }

  mainWindow.once("ready-to-show", () => {
    mainWindow.show();
    mainWindow.focus();
  });

  // mainWindow.webContents.openDevTools({ mode: "bottom" });

  return mainWindow;
};

app.on("ready", createWindow);

app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});


ipcMain.handle("create-memdump", async (event, filename, args) => {
  try {
    await executeCommand(filename, args);
    checkForTmpFile();
  } catch (error) {
    console.error("Error executing command:", error);

    // You can send an error message back to the renderer process if needed
    event.sender.send("create-memdump-error", error);

    throw error;
  }
});

ipcMain.handle("process-dump", async (event, filepath) => {
  try {
    if (!filepath) {
      filepath = listRawFilesWithSpaces();
    }
    filepath = `"${filepath}"`;
    await ldr_async(filepath, "ldrmodules");
    await runModule(filepath);
    exec(`rm ${filepath}`);
  } catch (error) {
    console.error("Error fetching data:", error);
    // You can send an error message back to the renderer process if needed
    event.sender.send("process-dump-error", error);

    throw error;
  }
});

let csvpath;
ipcMain.handle("custom-file", async (event) => {
  try {
    csvpath = processAndWriteToCSV();
  } catch (error) {
    console.error("Error :", error);

    // You can send an error message back to the renderer process if needed
    event.sender.send("custom-file-error-error", error);

    throw error;
  }
});

ipcMain.handle("test-model", async (event) => {
  try {
    return await runmodel(csvpath);
  } catch (error) {
    console.error("Error :", error);

    // You can send an error message back to the renderer process if needed
    event.sender.send("Test Model Error", error);

    throw error;
  }
});

ipcMain.handle("pdf-analyse", async (event, pdfpath) => {
  try {
    return await plyse(pdfpath);
  } catch (error) {
    console.error("Error :", error);

    // You can send an error message back to the renderer process if needed
    event.sender.send("Test Model Error", error);

    throw error;
  }
});

ipcMain.handle("network-capture", async (event, pcappath) => {
  try {
    const duration = 20;
    await capturecap(pcappath, duration);
    const filepath = join(__dirname, "../../src/output/predictions.csv");
    const data = await readAndParseCSV(filepath);
    let number = 0,
      bumper = 0;
    data.forEach((element) => {
      if (element["Label"] !== "BENIGN") {
        bumper += 1;
      } else {
        number += 1;
      }
    });
    console.log("Number of Begnign flows :", number);
    console.log("Number of Malicious flows :", bumper);
    rm(join(__dirname, "../../src/output/"));
    return { benign: number, malicious: bumper };
  } catch (error) {
    console.error("Error :", error);

    // You can send an error message back to the renderer process if needed
    event.sender.send("Test Model Error", error);

    throw error;
  }
});
